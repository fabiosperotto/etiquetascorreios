package com.correios.gui;

import com.correios.DAO.EnderecoDAO;
import com.correios.DAO.PessoaDAO;
import com.correios.entities.Endereco;
import com.correios.entities.Pessoa;
import com.correios.services.Etiqueta;
import java.awt.Cursor;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 * Tela interna de gerenciamento de enderecos para uma pessoa previamente
 * selecionada
 *
 * @see InternalPessoas
 * @author fabiosperotto
 */
public class InternalPessoaEndereco extends javax.swing.JInternalFrame {

    private JTable tbPessoas;
    private Pessoa pessoa;
    private int linhaTabelaAncestral;
    private final ResourceBundle traducoes;

    /**
     * Construtor da tela de enderecos da pessoa, possui uma ordem de chamada de
     * funcoes importantes para o funcionamento da tela
     *
     * @param traducoes ResourceBundle arquivo de traducoes carregado na main
     * para usar na aplicacao
     * @param tbPessoas JTable referencia ao JTable de InternalPessoas
     * @param linha int qual linha da JTable de InternalPessoas o usuario
     * selecionou (serve como referencia para atualizar campos entre telas)
     * @param pessoa Pessoa instancia da pessoa relacionada aos enderecos
     */
    public InternalPessoaEndereco(ResourceBundle traducoes, JTable tbPessoas, int linha, Pessoa pessoa) {
        this.tbPessoas = tbPessoas;
        this.linhaTabelaAncestral = linha;
        this.pessoa = pessoa;
        this.traducoes = traducoes;
        initComponents();
        this.carregarTabela();
        this.carregarFormulario();
    }

    /**
     * Realiza o preenchimento de dados no JTable desta tela por meio de dados
     * do BD
     */
    private void carregarTabela() {
        Pessoa pessoaEnderecos = PessoaDAO.buscarPessoaComEnderecos(this.pessoa.getId());
        if (pessoaEnderecos != null) {
            List<Endereco> enderecos = pessoaEnderecos.getEnderecos();
            DefaultTableModel modelo = (DefaultTableModel) this.tbEnderecos.getModel();
            for (Endereco endereco : enderecos) {
                String[] linha = {
                    String.valueOf(endereco.getId()),
                    endereco.getLogradouro(),
                    endereco.getNumero().toString()
                };
                modelo.addRow(linha);
            }
        }
        this.tbEnderecos.changeSelection(0, 0, false, false);
    }

    /**
     * Realiza o preenchimento de dados pessoais do usuario selecionado no
     * formulario de edicao
     */
    private void carregarFormulario() {
        this.setTitle(this.traducoes.getString("cad_endereco_frame_titulo"));
        this.txtNome.setText(this.pessoa.getNome());
        this.jlNome.setText(this.traducoes.getString("cad_pessoas_rotulo_nome"));
        this.jTituloEndereco.setText(this.traducoes.getString("cad_endereco_titulo_principal"));
        this.jlObrigatorios1.setText(this.traducoes.getString("cad_pessoas_rotulo_obrigatorios"));
        this.btnAtualizar.setText(this.traducoes.getString("cad_endereco_botao_atualizar"));
        this.jTituloLista.setText(this.traducoes.getString("cad_endereco_titulo_tabela"));
        this.btnGerarEtiqueta.setText(this.traducoes.getString("cad_etiqueta_botao_etiqueta"));
        this.btnSalvarModificacoes.setText(this.traducoes.getString("cad_endereco_botao_salvar"));
        this.btnAdicionarLinha.setText(this.traducoes.getString("cad_endereco_botao_adicionar"));
        this.btnRemover.setText(this.traducoes.getString("cad_endereco_botao_remover"));
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlNome = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbEnderecos = new javax.swing.JTable();
        btnAtualizar = new javax.swing.JButton();
        jTituloLista = new javax.swing.JLabel();
        jTituloEndereco = new javax.swing.JLabel();
        btnSalvarModificacoes = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        btnAdicionarLinha = new javax.swing.JButton();
        jlObrigatorios1 = new javax.swing.JLabel();
        btnGerarEtiqueta = new javax.swing.JButton();

        setClosable(true);
        setTitle("Detalhes do Cadastro de Pessoas");

        jlNome.setText("Nome*:");

        txtNome.setToolTipText("Informe nome completo da pessoa");

        tbEnderecos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Logradouro*", "Número*"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbEnderecos);

        btnAtualizar.setMnemonic('A');
        btnAtualizar.setText("Atualizar Dados Pessoais");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        jTituloLista.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jTituloLista.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jTituloLista.setText("Lista de Endereços da Pessoa");

        jTituloEndereco.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jTituloEndereco.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jTituloEndereco.setText("Informações Pessoais");

        btnSalvarModificacoes.setMnemonic('S');
        btnSalvarModificacoes.setText("Salvar Alterações");
        btnSalvarModificacoes.setToolTipText("Salva todos os endereços ditados ou novos da tabela");
        btnSalvarModificacoes.setMaximumSize(new java.awt.Dimension(157, 24));
        btnSalvarModificacoes.setMinimumSize(new java.awt.Dimension(157, 24));
        btnSalvarModificacoes.setPreferredSize(new java.awt.Dimension(133, 25));
        btnSalvarModificacoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarModificacoesActionPerformed(evt);
            }
        });

        btnRemover.setMnemonic('R');
        btnRemover.setText("Remover Endereço");
        btnRemover.setPreferredSize(new java.awt.Dimension(133, 25));
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverActionPerformed(evt);
            }
        });

        btnAdicionarLinha.setMnemonic('E');
        btnAdicionarLinha.setText("Adicionar Endereço");
        btnAdicionarLinha.setToolTipText("Adiciona linha na tabela acima, lembre-se de clicar em Salvar as alterações para armazenar os endereços");
        btnAdicionarLinha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarLinhaActionPerformed(evt);
            }
        });

        jlObrigatorios1.setForeground(new java.awt.Color(255, 0, 0));
        jlObrigatorios1.setText("* campos obrigatórios");

        btnGerarEtiqueta.setMnemonic('G');
        btnGerarEtiqueta.setText("Gerar Etiqueta");
        btnGerarEtiqueta.setToolTipText("Gerar etiqueta para endereço selecionado");
        btnGerarEtiqueta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerarEtiquetaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSalvarModificacoes, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdicionarLinha)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGerarEtiqueta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTituloEndereco, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTituloLista, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jlObrigatorios1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAtualizar))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlNome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNome)))
                .addGap(12, 12, 12))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTituloEndereco)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlNome))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAtualizar)
                    .addComponent(jlObrigatorios1))
                .addGap(13, 13, 13)
                .addComponent(jTituloLista)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSalvarModificacoes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemover, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAdicionarLinha)
                        .addComponent(btnGerarEtiqueta)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Realiza a persistencia dos dados pessoais de Pessoa que estao sendo
     * editados
     *
     * @param evt evento de clique principal do mouse
     */
    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        String nome = this.txtNome.getText();
        if (nome.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nome é campo obrigatório", "Dados Pessoais", JOptionPane.ERROR_MESSAGE);
        }
        if (!nome.isEmpty()) {
            this.pessoa.setNome(nome);
            if (PessoaDAO.atualizar(pessoa)) {
                DefaultTableModel modeloAncestral = (DefaultTableModel) this.tbPessoas.getModel();
                modeloAncestral.setValueAt(this.pessoa.getNome(), this.linhaTabelaAncestral, 1);
                JOptionPane.showMessageDialog(this, "Dados pessoais atualizados com sucesso", "Dados pessoais", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAtualizarActionPerformed

    /**
     * Processamento que ira persistir os daods de enderecos para o usuario. Se
     * o endereco ja existe, apenas atualiza. Se nao existe, cria e vincula para
     * a pessoa em edicao
     *
     * @param evt evento de clique principal do mouse
     */
    private void btnSalvarModificacoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarModificacoesActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) this.tbEnderecos.getModel();
        int idEndereco = 0;
        int numeroRua;
        String logradouro;
        Endereco endereco;
        Endereco novoEndereco;
        String idModelo;
        String numeroModelo;
        for (int i = 0; i < modelo.getRowCount(); i++) {
            idModelo = (String) modelo.getValueAt(i, 0); //java nao consegue converter Object para int diretamente entao segue a gambiarra necessaria para converter Object -> String -> int 
            logradouro = (String) modelo.getValueAt(i, 1);
            numeroModelo = (String) modelo.getValueAt(i, 2);
            numeroRua = Integer.parseInt(numeroModelo);
            if (idModelo.equals("")) { //novo endereco informado pelo usuario, entao nao tem ID do banco de dados
                novoEndereco = new Endereco(logradouro, numeroRua);
                novoEndereco.setPessoa(this.pessoa);
                EnderecoDAO.salvar(novoEndereco);
            }
            if (!idModelo.equals("")) { //endereco que veio do banco
                idEndereco = Integer.parseInt(idModelo); //fim da gambiarra do java pra converter de string pra int
                endereco = EnderecoDAO.buscarPorId(idEndereco);
                endereco.setLogradouro(logradouro);
                endereco.setNumero(numeroRua);
                EnderecoDAO.atualizar(endereco);
            }

        }
        JOptionPane.showMessageDialog(this, "Endereços atualizados/salvos com sucesso", "Endereços Pessoais", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_btnSalvarModificacoesActionPerformed

    /**
     * Adiciona uma linha ao JTable atual a fim de fornecer uma forma de
     * insercao de dados para o usuario
     *
     * @param evt evento de clique principal do mouse
     */
    private void btnAdicionarLinhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarLinhaActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) this.tbEnderecos.getModel();
        String[] linha = {
            "",
            "",
            ""
        };
        modelo.addRow(linha);
        this.tbEnderecos.changeSelection(this.tbEnderecos.getRowCount() - 1, 1, false, false);
        this.tbEnderecos.editCellAt(this.tbEnderecos.getRowCount() - 1, 1);
        this.tbEnderecos.requestFocus();
        this.tbEnderecos.getEditorComponent().setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_btnAdicionarLinhaActionPerformed

    /**
     * Realiza a remocao de um endereco de Pessoa, previamente selecionado pelo
     * usuario
     *
     * @param evt evento de clique principal do mouse
     */
    private void btnRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverActionPerformed
        int resposta = JOptionPane.showInternalConfirmDialog(this, "Tem certeza que deseja excluir?",
                "Exclusão de Endereço", JOptionPane.YES_NO_OPTION);

        if (resposta == 0) {
            int numeroLinha = this.tbEnderecos.getSelectedRow();
            int id = Integer.parseInt(this.tbEnderecos.getValueAt(numeroLinha, 0).toString());
            Endereco endereco = EnderecoDAO.buscarPorId(id);
            if (endereco != null) {
                EnderecoDAO.excluir(endereco);
                DefaultTableModel modelo = (DefaultTableModel) this.tbEnderecos.getModel();
                modelo.removeRow(this.tbEnderecos.getSelectedRow());
                JOptionPane.showInternalMessageDialog(this, "Registro excluído com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showInternalMessageDialog(this, "Não é possível excluir o endereço, uma mensagem foi enviado para o nosso suporte. Em caso de dúvidas entre em contato com suporte@correios.com", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnRemoverActionPerformed

    private void btnGerarEtiquetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerarEtiquetaActionPerformed
        int numeroLinha = this.tbEnderecos.getSelectedRow();
        int id = Integer.parseInt(this.tbEnderecos.getValueAt(numeroLinha, 0).toString());
        Endereco endereco = EnderecoDAO.buscarPorId(id);
        Etiqueta etiqueta = new Etiqueta(pessoa, endereco);
        if (etiqueta.gerarPDFEndereco()) {
            try {
                File arquivo = new File("./etiqueta.pdf");
                Desktop.getDesktop().open(arquivo);
            } catch (IOException ex) {
                Logger.getLogger(InternalEtiqueta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (!etiqueta.gerarPDFEndereco()) {
            JOptionPane.showInternalMessageDialog(this, "Não é possível gerar etiquetas, uma mensagem foi enviado para o nosso suporte. Em caso de dúvidas entre em contato com suporte@correios.com", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGerarEtiquetaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionarLinha;
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnGerarEtiqueta;
    private javax.swing.JButton btnRemover;
    private javax.swing.JButton btnSalvarModificacoes;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jTituloEndereco;
    private javax.swing.JLabel jTituloLista;
    private javax.swing.JLabel jlNome;
    private javax.swing.JLabel jlObrigatorios1;
    private javax.swing.JTable tbEnderecos;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables
}
